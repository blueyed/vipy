*vipy.txt*	For Vim version 7.3.  Last change: 2012 Aug 02


		  VIPY INSTRUCTION MANUAL    by David Giese


Help on the Vipy Plugin					*vipy*

1. Overview                                   |vipy-overview|
2. Starting vipy                              |vipy-startup|
3. The vipy buffer                            |vipy-buffer|
4. Extra functionailty in python files        |vipy-pyfiles|
5. Autocomplete                               |vipy-complete|
6. Customization                              |vipy-customization|
7. Issues                                     |vipy-issues|
8. Credits                                    |vipy-credits|

==============================================================================
1. Overview		                			*vipy-overview*

This plugin provides a special Vim buffer that acts like the IPython terminal.
No more alt-tabbing from your editor to the interpreter!  This special buffer
has the following features:
-Search command history from previous sessions using up and down arrows
-Appropriately handles input and raw_input requests from IPython; this allows
the use of the command line python debugger
-You can set your default IPython profile in your vimrc file (see
|vipy-customization|)
-Consistent python syntax highlighting in the editor and the terminal 
-Convenience methods for editing files (e.g. pythonObject?? will open the
file where the object is defined in a new vim buffer)

The plugin also provides a number of features for all python files:

-Smart autocomplete using IPython's object? ability
-Execute the current visual selection with <F9>
-Run the current file by pressing <F5>
-<C-CR> and <S-CR> will run the current "cell" (i.e. like MATLAB's cell mode;
see below for more details)

==============================================================================
2. Starting vipy				                *vipy-startup*

You can start the vipy plugin from any file by pressing <C-F12>

Optionally press <S-F12> to clean up any dead connection files from a previous
crash, or a manually closed kernel.

<C-F12> will look for an opened IPython kernel, but if it can't find one it
will start one for you in a separate command window.  If you are in windows a
command window will be opened (minimized by default), if you are on a mac or
linux machine, then the ipython process will be started in the background.

After connecting to the IPython kernel, vipy will open a new vim
window to the right of the current vim window with a special buffer loaded in
it, called vipy.py.  You can enter commands into this buffer as you would in
ipython.

==============================================================================
3. The vipy buffer				        	*vipy-buffer*

The vipy buffer has some special mappings that make it act like the IPython prompt

You can execute commands by pressing <CR>

Press <S-CR> to create a new line with "... " so that you can execute
multi-line inputs like for loops and if statements

If you are in insert mode, and the cursor is at the end of the last line,
then <up> and <down> will search the command history for all matches starting with
the current line's content.  Pressing <up> and <down> repeatedly will loop through
the matches; this works even for multi-line inputs such as for loops.  If the
current line is an empty prompt, pressing <up> and <down> will loop through the
last 50 inputs.  If the cursor is anywhere except the end of the buffer, the
up and down arrows will act normally.

<F12> will goto the previously used window if there are multiple windows
open, or it will go to the previously used buffer if there is only a single
window open.

Typing object? will print the IPython help, properly formatted.

Typing object?? will open the file and place the cursor where the object is
defined in a vim buffer.  If the object is a module, the cursor will be placed
at the top of the file.  If the file is already opened, vipy will switch to
it.

The vipy buffer has special syntax highlighting; input is formatted as
usual, while standard output (except for python documentation) uses normal
formatting.  This is an advantage over the normal IPython console, because
vim's colorschemes are not restricted to ascii colors, and the console
highlighting will follow the same setup you have for your regular python
files.

The status of the IPython kernel is displayed in the status line of the vipy
buffer

There are a number of special commands that vipy intercepts before sending
messages to the ipython server.  These commands and their actions are listed
below:

  cdv : this command will set vim's current working directory to ipython's
  current working directory; useful for searching for files in vim

  edit file : this command will open the specified file relative to the
  ipython path; you can also use wild cards etc. like you can with the :edit
  command.  The new file is opened as a buffer in the current window (so the
  vipy buffer will now be hidden behind the other buffers.  You can get it
  back using by pressing <F12>)

  sedit file : same as edit, but opens the file in a new window, split from
  the current window

  vedit file : same as edit, but opens the file in a new window, split
  vertically from the current window

  cls or clear : clear the vipy buffer

==============================================================================
4. Extra functionailty in python files                     *vipy-pyfiles*

In addition to bringing ipython into vim, vipy also provides additional
functionality for regular python files.

<C-F5> will execute the current file

<F9> in visual mode will execute the selected text

<F9> in normal mode will execute the current line, and progress to the next
  line, so that you "step" through a simple file by pressing F9 repeatedly.

<K> in normal mode will open the documentation for the word that the cursor is
on, in a new window. While in this documentation window, pressing K again will
move the cursor back to the previous spot (while keeping the window open).
Pressing q or ESC from within the documentation buffer will close it.

Pressing <F12> will drop the vipy buffer in the current window if it isn't
currently opened in any vim window, otherwise it will move the cursor to the
end of the vipy buffer.

<S-F12> will wipe the vipy buffer and close the kernel

<S-CR> will execute the current CELL. For anyone who is unfamiliar with
MATLAB's cell mode, it works as follows: A cell is a set of statements
surrounded by a special comment starting with two pound signs (i.e. ##). If
you press SHIFT-ENTER the current cell will be executed. If you press
<C-CR>, the current cell will be executed, and the cursor will progress to
the next cell, so that you can conveniently step through cells of your
program. Cell mode is useful for situations where you want to load data once,
but execute some analysis of that data multiple times

==============================================================================
5. Complete                                         *vipy-complete*

VIPY provides a user-complete that querys the IPython kernel for information
about an object.  By default this is accessed using <C-xC-u>, however I
strongly reccomend that you install the SuperTab plugin, so that you can use
TAB instead. 

For example,
>>> a = [1,2,3,4]
>>> a.|
if you start the autocompete at | This would bring up a menu with a number of
options: a.append, a.count, etc. which you could scroll through (<C-N> and
<C-P> by default, <tab> and <s-tab> if you have supertab installed).

If you are in the command prompt, you can now press <S-CR> to print the
options actually into the buffer.  This is useful if you want to search the
output, or there are too many options to see on one screen.

==============================================================================
6. Customization                                    *vipy-customization*

The following global variables can be set in your vimrc:

The ipython profile can be set using:
    g:vipy_profile='default'

IPython has a routine for finding the ipython directory that uses the
IPYTHONDIR environment variable.  Unfortuneatly there is no way to customize
the ipython directory without modifying this variable.

Vipy usually looks for any open IPython kernels before starting one by itself.
Ordinarily this works great, however if IPython crashes or is manually closed,
the dead connection files are not cleaned up, and they confuse vipy.  By
default vipy will remove any of these connection files when you press <S-F12>.
This can create problems if you are connecting over a server; if you want to
remove this auto-clean behavior, use:
    g:vipy_clean_connect_files=0

==============================================================================
7. Issues                                       *vipy-issues*

If the server is unresponsive, close it using <S-F12>, and reopen it again by
pressing <C-F12>.  This will clean out any old connection files that may be
confusing the vipy.  This connection files will accumulate if you manually
close the python server in windows, or if vipy crashes.

The vipy.py buffer tries to be pretty smart about how it handles the prompts
and output, however the intepretter is fundamentally it is normal vim buffer,
and thus you can edit it how you would a normal buffer. This is good and bad;
you can use your favorite shortcuts, however you can also confuse it if you
delete the prompts (i.e. the ">>> " of the "... " if you are entering a
multiline command").

The string syntax highlighting can bleed into subsequent lines.  I have found
no way around this short of modifying the default python syntax files.  I
guess it is the price of having vim's syntax highlighting work in the prompt.
If it really bothers you just clear vipy using >>> cls or >>> clear

==============================================================================
8. Credits                                          *vipy-credits*

* Paul Ivanov for his vim-ipython plugin which got me started.
* Prof. Jerome Mertz at Boston University for being a great PI.
* Fernando Perez for writing IPython.
* Bram Moolenaar for writing Vim.



 vim:tw=78:ts=8:ft=help:norl:
