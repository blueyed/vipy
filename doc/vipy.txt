*vipy.txt*	For Vim version 7.3.  Last change: 2012 Aug 02


		  VIPY INSTRUCTION MANUAL    by David Giese


Help on the Vipy Plugin					*vipy*

1. Overview     		|vipy-overview|
2. Starting vipy        	|vipy-startup|
3. The vipy buffer      	|vipy-buffer|
4. Customization                |vipy-customization|

==============================================================================
1. Overview		                			*vipy-overview*

This plugin provides a special Vim buffer that acts like the IPython terminal.  No more alt-tabbing from your editor to the interpreter!  This special buffer has the following features:
--Search command history from previous sessions using up and down arrows
--Appropriately handles input and raw_input requests from IPython; this allows the use of the command line python debugger
--You can set your default IPython profile in your vimrc file (see
--*vipy-customization*)
--Consistent python syntax highlighting in the editor and the terminal 
--Convenience methods for editing files (e.g. pythonObject?? will open the file where the object is defined in a new vim buffer)

The plugin also provides a number of features for all python files:

--Smart autocomplete using IPython's object? ability
--Execute the current visual selection with <F9>
--Run the current file by pressing <F5>
--<C-CR> and <S-CR> will run the current "cell" (i.e. like MATLAB's cell mode; see below for more details)
When yo

==============================================================================
2. Starting vipy				                *vipy-startup*

Optionally press <S-F12> to clean up any dead connection files from a previous
crash, or a manually closed kernel.
You can start the vipy plugin by pressing <C-F12>

<C-F12> will look for an opened IPython kernel, but if it can't find one it
will start one for you in a separate command window (don't close it
manually!).  After connecting to the IPython kernel, vipy will open a new vim
window to the right of the current vim window with a special buffer loaded in
it, called vipy.py.

==============================================================================
3. The vipy buffer				        	*vipy-buffer*

The vipy buffer has some special mappings that make it act like the IPython prompt
--You can execute commands by pressing <S-CR>
--Press <CR> to create a new line with "... " so that you can execute
multi-line inputs like for loops and if statements
--If you are in insert mode, and the cursor is at the end of the last line,
then <up> and <down> will search the command history for all matches starting with
the current line's content.  Pressing <up> and <down> repeatedly will loop through
the matches; this works even for multi-line inputs such as for loops.  If the
current line is an empty prompt, pressing <up> and <down> will loop through the
last 50 inputs.  If the cursor is anywhere except the end of the buffer, the
up and down arrows will act normally.
--<F12> will goto the previously used window
--Typing object? will print the IPython help, properly formatted.
--Typing object?? will open the file where the object is defined in a vim buffer.
--The vipy buffer has special syntax highlighting; input is formatted as
usual, while standard output (except for python documentation) uses normal
formatting.  This is an advantage over the normal IPython console, because
vim's colorschemes are not restricted to ascii colors, and the console
highlighting will follow the same setup you have for your regular python
files.
--The status of the IPython kernel is displayed in the status line of the vipy buffer

==============================================================================
4. Customization                                    *vipy-customization*

The following global variables can be set in your vimrc:

The ipython profile can be set using:
g:vipy_profile='default'

IPython has a routine for finding the ipython directory; usually it will use
the $HOME environment variable by default.  If you want to hard-code a
directory you can use:
g:vipy_ipy_dir='C:\my\ipython\dir'
Leave the value unset (or set it to "0") if you want to let ipython find the
directory naturally.

Vipy usually looks for any open IPython kernels before starting one by itself.
Ordinarily this works great, however if IPython crashes or is manually closed,
the dead connection files are not cleaned up, and they confuse vipy.  By
default vipy will remove any of these connection files when you press <S-F12>.
This can create problems if you are connecting over a server; if you want to
remove this auto-clean behavior, use:
g:vipy_clean_connect_files=0

 vim:tw=78:ts=8:ft=help:norl:
